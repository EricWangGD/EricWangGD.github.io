{"version":3,"file":"static/js/393.b6e16808.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","ChatModule.js"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport {\n    withTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport VARIANTS_ICON from './components/generic-message/const/variantsConst';\n// Services\nimport TwilioService from './services/TwilioService';\nimport ChatService from './services/ChatService';\n// Utils\nimport CSSImport from './utils/CSSImport';\nimport GatewayHttpClient from './utils/GatewayHttpClient';\nimport UrlHelper from './utils/UrlHelper';\n// Constants\nimport {\n    BRAND,\n    PLATFORM,\n    ENVIRONMENT,\n    PREFIX_URL_CONFIG,\n} from './const/urlConst';\n// Styles\nimport './styles/chat-module.scss';\n\ninitTranslations({\n    defaultTranslations: {\n        'en-US': () => import('./i18n/en-us.json'),\n    },\n    partnerId: 'walmart',\n    shouldLoadStrings: false,\n});\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onChatWidgetClose: PropTypes.func,\n        i18n: PropTypes.object,\n        isI18nReady: PropTypes.bool,\n        platform: PropTypes.string,\n        loginUrl: PropTypes.string,\n    };\n\n    static defaultProps = {\n        onChatWidgetClose: () => Promise.resolve(),\n        platform: PLATFORM.BAAS,\n        brand: BRAND.GO2BANK,\n        env: ENVIRONMENT.PROD,\n    };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n    };\n\n    render() {\n        const { isDesignTokenApplied } = this.state;\n        const { isI18nReady } = this.props;\n\n        return isDesignTokenApplied && isI18nReady && this.renderContent();\n    }\n\n    componentDidMount() {\n        this.initialSetup();\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n        this.destoryClient();\n        GatewayHttpClient.cleanData();\n    }\n\n    renderContent = () => {\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n        } = this.state;\n        const { contextCls } = this.props;\n\n        return (\n            <div className={cx(this.baseCls, contextCls)}>\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowErrorPage && this.renderErrorPage()}\n            </div>\n        );\n    };\n\n    renderHoopWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n        const { hoop, isLeaveAgentMessageEnabled } = chatConfigs ?? {};\n\n        return (\n            <Hoop\n                contextCls={`${this.baseCls}__hoop`}\n                hoop={hoop}\n                isLeaveAgentMessageEnabled={isLeaveAgentMessageEnabled}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n        const { ewt } = chatConfigs ?? {};\n\n        return (\n            <ChooseOptionWindow\n                contextCls={`${this.baseCls}__choose-option-window`}\n                ewt={ewt}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, i18n, ...restProps } = this.props;\n        const windowTitle = i18n.getTranslation('chatModule.errorPage.title');\n        const headText = i18n.getTranslation('chatModule.errorPage.headText');\n        const subText = i18n.getTranslation('chatModule.errorPage.subText');\n\n        return (\n            <GenericMessage\n                contextCls={`${this.baseCls}__generic-message`}\n                icon={VARIANTS_ICON.WARNING}\n                windowTitle={windowTitle}\n                headText={headText}\n                subText={subText}\n                i18n={i18n}\n                {...restProps}\n            />\n        );\n    };\n\n    fetchConfig = async () => {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, ...restConfig } = chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else {\n                newState.shouldShowHoopWindow = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    };\n\n    initialSetup = () => {\n        const { accessToken, applicationId, platform, env } = this.props;\n\n        if (accessToken) {\n            GatewayHttpClient.accessToken = accessToken;\n        }\n\n        if (applicationId) {\n            GatewayHttpClient.applicationId = applicationId;\n        }\n\n        if (platform) {\n            UrlHelper.platform = platform.toUpperCase();\n        }\n\n        if (env) {\n            GatewayHttpClient.env = env.toUpperCase();\n\n            GatewayHttpClient.prefixAPIUrl =\n                PREFIX_URL_CONFIG[UrlHelper.platform][GatewayHttpClient.env];\n        }\n    };\n\n    applyDesignToken = () => {\n        const { brand } = this.props;\n        CSSImport.import(brand);\n        this.setState({\n            isDesignTokenApplied: true,\n        });\n    };\n\n    setContainerElementStyle = () => {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    };\n\n    restoreContainerElementStyle = () => {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    };\n\n    destoryClient = async () => {\n        await TwilioService.destoryClient();\n    };\n\n    baseCls = 'web-chat-module';\n}\n\nexport default withTranslation(ChatModule);\n"],"names":["module","exports","initTranslations","defaultTranslations","partnerId","shouldLoadStrings","ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","renderContent","contextCls","props","className","cx","baseCls","renderChooseOptionWindow","renderHoopWindow","renderErrorPage","restProps","chatConfigs","hoop","isLeaveAgentMessageEnabled","ewt","i18n","windowTitle","getTranslation","headText","subText","icon","VARIANTS_ICON","fetchConfig","newState","ChatService","chatConfig","isAgentOnline","restConfig","setState","initialSetup","accessToken","applicationId","platform","env","GatewayHttpClient","UrlHelper","toUpperCase","PREFIX_URL_CONFIG","applyDesignToken","brand","CSSImport","isDesignTokenApplied","setContainerElementStyle","containerElement","originContainerElementPosition","style","position","restoreContainerElementStyle","destoryClient","TwilioService","this","isI18nReady","PureComponent","defaultProps","onChatWidgetClose","Promise","resolve","PLATFORM","BRAND","ENVIRONMENT","withTranslation"],"sourceRoot":""}
{"version":3,"file":"static/js/983.ce4cd6ea.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","ChatModule.js"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport {\n    withTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\n\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\nimport CssImport from './util/CssImport';\nimport GatewayHttpClient from './util/GatewayHttpClient';\nimport TwilioService from './service/TwilioService';\n\ninitTranslations({\n    defaultTranslations: {\n        'en-US': () => import('./i18n/en-us.json'),\n    },\n    partnerId: 'walmart',\n    shouldLoadStrings: false,\n});\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onChatWidgetClose: PropTypes.func,\n        i18n: PropTypes.object,\n        isI18nReady: PropTypes.bool,\n        prefixAPIUrl: PropTypes.string,\n    };\n\n    static defaultProps = { onChatWidgetClose: () => Promise.resolve() };\n\n    state = {\n        shouldShowChooseOptionWindow: false,\n        shouldShowErrorPage: false,\n        shouldShowHoopWindow: false,\n    };\n\n    render() {\n        const { isDesignTokenApplied } = this.state;\n        const { isI18nReady } = this.props;\n\n        return isDesignTokenApplied && isI18nReady && this.renderContent();\n    }\n\n    componentDidMount() {\n        const { accessToken, applicationId, prefixAPIUrl } = this.props;\n\n        if (accessToken) {\n            GatewayHttpClient.accessToken = accessToken;\n        }\n\n        if (applicationId) {\n            GatewayHttpClient.applicationId = applicationId;\n        }\n\n        if (prefixAPIUrl) {\n            GatewayHttpClient.prefixAPIUrl = prefixAPIUrl;\n        }\n\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n        this.destoryClient();\n    }\n\n    renderContent() {\n        const {\n            shouldShowChooseOptionWindow,\n            shouldShowErrorPage,\n            shouldShowHoopWindow,\n        } = this.state;\n\n        return (\n            <>\n                {shouldShowChooseOptionWindow &&\n                    this.renderChooseOptionWindow()}\n                {shouldShowHoopWindow && this.renderHoopWindow()}\n                {shouldShowErrorPage && this.renderErrorPage()}\n            </>\n        );\n    }\n\n    renderHoopWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                hoop={chatConfigs.hoop}\n                isLeaveAgentMessageEnabled={\n                    chatConfigs.isLeaveAgentMessageEnabled\n                }\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                ewt={chatConfigs.ewt}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat with an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                {...restProps}\n            />\n        );\n    };\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            // const chatConfig = await ChatService.getChatConfig();\n            // const { isAgentOnline, isSuccess, errors, ...restConfig } =\n            //     chatConfig;\n            // newState.chatConfigs = restConfig;\n\n            // if (isAgentOnline === true) {\n            //     newState.shouldShowChooseOptionWindow = true;\n            // } else if (isAgentOnline === false) {\n            //     newState.shouldShowHoopWindow = true;\n            // } else {\n            //     newState.shouldShowErrorPage = true;\n            // }\n\n            const chatConfig = await ChatService.getChatConfig();\n            const { isSuccess, errors, ...restConfig } = chatConfig;\n            newState.chatConfigs = restConfig;\n            const { href } = window.location;\n\n            if (href.indexOf('?')) {\n                const url = href.split('?')[1];\n                const arr = url.split('&');\n                const list = [\n                    'hoop',\n                    'isAgentOnline',\n                    'ewt',\n                    'isLeaveAgentMessageEnabled',\n                    'leaveAgentMessage',\n                    'userInactiveInterval',\n                ];\n\n                for (let i = 0; i < arr.length; i += 1) {\n                    const arrNew = arr[i].split('=');\n\n                    if (list.some((x) => x === arrNew[0])) {\n                        if (Number(arrNew[1] >= 0)) {\n                            arrNew[1] = Number(arrNew[1]);\n                        }\n                        console.debug(typeof newState.chatConfigs[arrNew[0]]);\n\n                        if (arrNew[1] === 'false') {\n                            arrNew[1] = false;\n                        }\n\n                        if (arrNew[1] === 'true') {\n                            arrNew[1] = true;\n                        }\n                        // eslint-disable-next-line prefer-destructuring\n                        newState.chatConfigs[arrNew[0]] = arrNew[1];\n                    }\n                }\n            }\n\n            console.debug(2, newState.chatConfigs);\n\n            if (newState.chatConfigs.isAgentOnline === true) {\n                newState.shouldShowChooseOptionWindow = true;\n            } else if (newState.chatConfigs.isAgentOnline === false) {\n                newState.shouldShowHoopWindow = true;\n            } else {\n                newState.shouldShowErrorPage = true;\n            }\n        } catch (e) {\n            newState.shouldShowErrorPage = true;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    async applyDesignToken() {\n        try {\n            const { brand } = this.props;\n            await CssImport.import(brand);\n            this.setState({\n                isDesignTokenApplied: true,\n            });\n        } catch (e) {\n            console.debug(e.message);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    destoryClient = async () => {\n        await TwilioService.destoryClient();\n    };\n\n    baseCls = 'web-chat-module';\n}\n\nexport default withTranslation(ChatModule);\n"],"names":["module","exports","initTranslations","defaultTranslations","partnerId","shouldLoadStrings","ChatModule","state","shouldShowChooseOptionWindow","shouldShowErrorPage","shouldShowHoopWindow","renderHoopWindow","props","contextCls","restProps","chatConfigs","cx","baseCls","hoop","isLeaveAgentMessageEnabled","renderChooseOptionWindow","ewt","renderErrorPage","icon","windowTitle","headText","subText","destoryClient","TwilioService","isDesignTokenApplied","this","isI18nReady","renderContent","accessToken","applicationId","prefixAPIUrl","GatewayHttpClient","setContainerElementStyle","fetchConfig","applyDesignToken","restoreContainerElementStyle","newState","ChatService","chatConfig","isSuccess","errors","restConfig","href","window","location","indexOf","url","split","arr","list","i","arrNew","some","x","Number","console","debug","length","isAgentOnline","setState","brand","CssImport","message","containerElement","originContainerElementPosition","style","position","PureComponent","defaultProps","onChatWidgetClose","Promise","resolve","withTranslation"],"sourceRoot":""}
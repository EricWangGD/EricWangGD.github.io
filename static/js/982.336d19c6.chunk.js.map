{"version":3,"file":"static/js/982.336d19c6.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","reportWebVitals.js","ChatModule.js","bootstrap.js","../node_modules/react-dom/client.js"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport {\n    withTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\n\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\nimport CssImport from './util/CssImport';\nimport GatewayHttpClient from './util/GatewayHttpClient';\nimport Page from './const/pageConst';\nimport LeaveMessage from './components/leave-message/LeaveMessage';\nimport ChatConnectingWindow from './components/chat-connecting-window/ChatConnectingWindow';\nimport ChatWindow from './components/chat-window/ChatWindow';\n\ninitTranslations({\n    defaultTranslations: {\n        'en-US': () => import('./i18n/en-us.json'),\n    },\n    partnerId: 'walmart',\n    shouldLoadStrings: false,\n});\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onChatWidgetClose: PropTypes.func,\n        i18n: PropTypes.object,\n        isI18nReady: PropTypes.bool,\n        prefixAPIUrl: PropTypes.string,\n    };\n\n    static defaultProps = {\n        onChatWidgetClose: () => Promise.resolve(),\n    };\n\n    state = {\n        shouldShowPage: Page.ChoosePage,\n    };\n\n    render() {\n        const { isDesignTokenApplied, chatConfigs } = this.state;\n        const { isI18nReady } = this.props;\n\n        return (\n            isDesignTokenApplied &&\n            isI18nReady &&\n            chatConfigs &&\n            this.renderContent()\n        );\n    }\n\n    componentDidMount() {\n        const { accessToken, applicationId, prefixAPIUrl } = this.props;\n\n        if (accessToken) {\n            GatewayHttpClient.accessToken = accessToken;\n        }\n\n        if (applicationId) {\n            GatewayHttpClient.applicationId = applicationId;\n        }\n\n        if (prefixAPIUrl) {\n            GatewayHttpClient.prefixAPIUrl = prefixAPIUrl;\n        }\n\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n    }\n\n    renderContent() {\n        const { shouldShowPage } = this.state;\n        let content;\n\n        switch (shouldShowPage) {\n            case Page.ChoosePage: {\n                content = this.renderChooseOptionWindow();\n                break;\n            }\n            case Page.HoopPage: {\n                content = this.renderHoopWindow();\n                break;\n            }\n            case Page.ErrorPage: {\n                content = this.renderErrorPage();\n                break;\n            }\n            case Page.ChatWindowPage: {\n                content = this.renderChatWindowPage();\n                break;\n            }\n            case Page.LeavePage: {\n                content = this.renderLeaveMessagePage();\n                break;\n            }\n            case Page.ConnectingPage: {\n                content = this.renderConnectingPage();\n                break;\n            }\n            default:\n                break;\n        }\n\n        return content;\n    }\n\n    // #region render page\n\n    renderHoopWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                hoop={chatConfigs.hoop}\n                isLeaveAgentMessageEnabled={\n                    chatConfigs.isLeaveAgentMessageEnabled\n                }\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                ewt={chatConfigs.ewt}\n                onPageSwitch={this.handlePageSwitch}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat with an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                {...restProps}\n            />\n        );\n    };\n\n    renderLeaveMessagePage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <LeaveMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                shouldShowEmailInput={!this.isLoggedIn}\n                {...restProps}\n            />\n        );\n    };\n\n    renderConnectingPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <ChatConnectingWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                shouldShowMinimizeBtn\n                onPageSwitch={this.handlePageSwitch}\n                {...restProps}\n            />\n        );\n    };\n\n    renderChatWindowPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <ChatWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                shouldShowEmailInput={!this.isLoggedIn}\n                onPageSwitch={this.handlePageSwitch}\n                {...restProps}\n            />\n        );\n    };\n\n    // #endregion\n\n    handlePageSwitch = (pageName) => {\n        this.setState({\n            shouldShowPage: pageName,\n        });\n    };\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, isSuccess, errors, ...restConfig } =\n                chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline === true) {\n                newState.shouldShowPage = Page.ChoosePage;\n            } else if (isAgentOnline === false) {\n                newState.shouldShowPage = Page.HoopPage;\n            } else {\n                newState.shouldShowPage = Page.ErrorPage;\n            }\n        } catch (e) {\n            newState.shouldShowPage = Page.ErrorPage;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    async applyDesignToken() {\n        try {\n            const { brand } = this.props;\n            await CssImport.import(brand);\n            this.setState({\n                isDesignTokenApplied: true,\n            });\n        } catch (e) {\n            console.debug(e.message);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default withTranslation(ChatModule);\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport initMirageServer from '@Green-Dot-Corporation/eureka-lib-mock-utils/src/initMirageServer';\nimport reportWebVitals from './reportWebVitals';\nimport registerRoutes from './mock/registerRoutes';\nimport ChatModule from './ChatModule';\nimport './styles/index.scss';\n\nif (process.env.NODE_ENV === 'development') {\n    // Shutdown any existing instance of server to avoid multiple pretender\n    // instances error\n    if (window.server && typeof window.server.shutdown === 'function') {\n        window.server.shutdown();\n    }\n\n    // Create server and pass routes and other options\n    window.server = initMirageServer({\n        routes() {\n            registerRoutes(this);\n        },\n    });\n}\nconst rootElement = document.getElementById('root');\nconst root = ReactDOM.createRoot(rootElement);\nconst handleCloseWindow = () => {\n    console.log('Chat window has been closed');\n};\nroot.render(\n    <React.StrictMode>\n        <div>\n            Test Widget Page, when invoke the wiget, we should expose the\n            ChatModule only and set the containerElement to which element in the\n            existing page\n        </div>\n        <ChatModule\n            containerElement={rootElement}\n            accessToken=\"ajkdjkljaklsjdfkljaklsdjfljksdajlf\"\n            brand=\"go2bank\"\n            accountIdentifier=\"adjkajsdlfjlkajsd\"\n            onChatWidgetClose={handleCloseWindow}\n            applicationId=\"10001\"\n            email=\"ewang2@greendotcorp.com\"\n        />\n    </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["module","exports","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initTranslations","defaultTranslations","partnerId","shouldLoadStrings","ChatModule","state","shouldShowPage","Page","renderHoopWindow","props","contextCls","restProps","chatConfigs","Hoop","cx","baseCls","hoop","isLeaveAgentMessageEnabled","renderChooseOptionWindow","ChooseOptionWindow","ewt","onPageSwitch","handlePageSwitch","renderErrorPage","GenericMessage","icon","windowTitle","headText","subText","renderLeaveMessagePage","LeaveMessage","shouldShowEmailInput","isLoggedIn","renderConnectingPage","ChatConnectingWindow","shouldShowMinimizeBtn","renderChatWindowPage","ChatWindow","pageName","setState","this","isDesignTokenApplied","isI18nReady","renderContent","accessToken","applicationId","prefixAPIUrl","GatewayHttpClient","setContainerElementStyle","fetchConfig","applyDesignToken","restoreContainerElementStyle","content","newState","ChatService","chatConfig","isAgentOnline","isSuccess","errors","restConfig","brand","CssImport","console","debug","message","containerElement","originContainerElementPosition","style","position","PureComponent","defaultProps","onChatWidgetClose","Promise","resolve","withTranslation","rootElement","document","getElementById","ReactDOM","render","accountIdentifier","log","email","reportWebVitals","m","require","createRoot","hydrateRoot"],"sourceRoot":""}
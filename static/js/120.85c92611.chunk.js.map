{"version":3,"file":"static/js/120.85c92611.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/regenerator/index.js","ChatModule.js"],"sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","import cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport {\n    withTranslation,\n    initTranslations,\n} from '@Green-Dot-Corporation/eureka-lib-i18n-utils';\nimport ChooseOptionWindow from './components/choose-option-window/ChooseOptionWindow';\n\nimport GenericMessage from './components/generic-message/GenericMessage';\nimport Hoop from './components/hoop/Hoop';\nimport ChatService from './service/ChatService';\nimport './styles/chat-module.scss';\nimport CssImport from './util/CssImport';\nimport GatewayHttpClient from './util/GatewayHttpClient';\nimport Page from './const/pageConst';\nimport LeaveMessage from './components/leave-message/LeaveMessage';\nimport ChatConnectingWindow from './components/chat-connecting-window/ChatConnectingWindow';\nimport ChatWindow from './components/chat-window/ChatWindow';\n\ninitTranslations({\n    defaultTranslations: {\n        'en-US': () => import('./i18n/en-us.json'),\n    },\n    partnerId: 'walmart',\n    shouldLoadStrings: false,\n});\nclass ChatModule extends PureComponent {\n    static propTypes = {\n        contextCls: PropTypes.string,\n        containerElement: PropTypes.object,\n        accountIdentifier: PropTypes.string,\n        accessToken: PropTypes.string,\n        email: PropTypes.string,\n        brand: PropTypes.string,\n        applicationId: PropTypes.string,\n        env: PropTypes.string,\n        onChatWidgetClose: PropTypes.func,\n        i18n: PropTypes.object,\n        isI18nReady: PropTypes.bool,\n        prefixAPIUrl: PropTypes.string,\n    };\n\n    static defaultProps = {\n        onChatWidgetClose: () => Promise.resolve(),\n    };\n\n    state = {\n        shouldShowPage: Page.ChoosePage,\n    };\n\n    render() {\n        const { isDesignTokenApplied, chatConfigs } = this.state;\n        const { isI18nReady } = this.props;\n\n        return (\n            isDesignTokenApplied &&\n            isI18nReady &&\n            chatConfigs &&\n            this.renderContent()\n        );\n    }\n\n    componentDidMount() {\n        const { accessToken, applicationId, prefixAPIUrl } = this.props;\n\n        if (accessToken) {\n            GatewayHttpClient.accessToken = accessToken;\n        }\n\n        if (applicationId) {\n            GatewayHttpClient.applicationId = applicationId;\n        }\n\n        if (prefixAPIUrl) {\n            GatewayHttpClient.prefixAPIUrl = prefixAPIUrl;\n        }\n\n        this.setContainerElementStyle();\n        this.fetchConfig();\n        this.applyDesignToken();\n    }\n\n    componentWillUnmount() {\n        this.restoreContainerElementStyle();\n    }\n\n    renderContent() {\n        const { shouldShowPage } = this.state;\n        let content;\n\n        switch (shouldShowPage) {\n            case Page.ChoosePage: {\n                content = this.renderChooseOptionWindow();\n                break;\n            }\n            case Page.HoopPage: {\n                content = this.renderHoopWindow();\n                break;\n            }\n            case Page.ErrorPage: {\n                content = this.renderErrorPage();\n                break;\n            }\n            case Page.ChatWindowPage: {\n                content = this.renderChatWindowPage();\n                break;\n            }\n            case Page.LeavePage: {\n                content = this.renderLeaveMessagePage();\n                break;\n            }\n            case Page.ConnectingPage: {\n                content = this.renderConnectingPage();\n                break;\n            }\n            default:\n                break;\n        }\n\n        return content;\n    }\n\n    // #region render page\n\n    renderHoopWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <Hoop\n                contextCls={cx(this.baseCls, contextCls)}\n                hoop={chatConfigs.hoop}\n                isLeaveAgentMessageEnabled={\n                    chatConfigs.isLeaveAgentMessageEnabled\n                }\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderChooseOptionWindow = () => {\n        const { contextCls, ...restProps } = this.props;\n        const { chatConfigs } = this.state;\n\n        return (\n            <ChooseOptionWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                ewt={chatConfigs.ewt}\n                onPageSwitch={this.handlePageSwitch}\n                {...restProps}\n                {...chatConfigs}\n            />\n        );\n    };\n\n    renderErrorPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <GenericMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                icon=\"WarningAlert\"\n                windowTitle=\"Chat with an agent\"\n                headText=\"There was a problem connecting to chat support\"\n                subText=\"Please try again later.\"\n                {...restProps}\n            />\n        );\n    };\n\n    renderLeaveMessagePage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <LeaveMessage\n                contextCls={cx(this.baseCls, contextCls)}\n                shouldShowEmailInput={!this.isLoggedIn}\n                {...restProps}\n            />\n        );\n    };\n\n    renderConnectingPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <ChatConnectingWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                shouldShowMinimizeBtn\n                onPageSwitch={this.handlePageSwitch}\n                {...restProps}\n            />\n        );\n    };\n\n    renderChatWindowPage = () => {\n        const { contextCls, ...restProps } = this.props;\n\n        return (\n            <ChatWindow\n                contextCls={cx(this.baseCls, contextCls)}\n                shouldShowEmailInput={!this.isLoggedIn}\n                onPageSwitch={this.handlePageSwitch}\n                {...restProps}\n            />\n        );\n    };\n\n    // #endregion\n\n    handlePageSwitch = (pageName) => {\n        this.setState({\n            shouldShowPage: pageName,\n        });\n    };\n\n    async fetchConfig() {\n        const newState = {};\n\n        try {\n            const chatConfig = await ChatService.getChatConfig();\n            const { isAgentOnline, isSuccess, errors, ...restConfig } =\n                chatConfig;\n            newState.chatConfigs = restConfig;\n\n            if (isAgentOnline === true) {\n                newState.shouldShowPage = Page.ChoosePage;\n            } else if (isAgentOnline === false) {\n                newState.shouldShowPage = Page.HoopPage;\n            } else {\n                newState.shouldShowPage = Page.ErrorPage;\n            }\n        } catch (e) {\n            newState.shouldShowPage = Page.ErrorPage;\n        } finally {\n            this.setState(newState);\n        }\n    }\n\n    async applyDesignToken() {\n        try {\n            const { brand } = this.props;\n            await CssImport.import(brand);\n            this.setState({\n                isDesignTokenApplied: true,\n            });\n        } catch (e) {\n            console.debug(e.message);\n        }\n    }\n\n    setContainerElementStyle() {\n        const { containerElement } = this.props;\n\n        if (containerElement) {\n            this.setState({\n                originContainerElementPosition: containerElement.style.position,\n            });\n            containerElement.style.position = 'relative';\n        }\n    }\n\n    restoreContainerElementStyle() {\n        const { containerElement } = this.props;\n        const { originContainerElementPosition } = this.state;\n\n        if (containerElement && originContainerElementPosition) {\n            containerElement.style.position = originContainerElementPosition;\n        }\n    }\n\n    baseCls = 'web-chat-module';\n}\n\nexport default withTranslation(ChatModule);\n"],"names":["module","exports","initTranslations","defaultTranslations","partnerId","shouldLoadStrings","ChatModule","state","shouldShowPage","Page","renderHoopWindow","props","contextCls","restProps","chatConfigs","cx","baseCls","hoop","isLeaveAgentMessageEnabled","renderChooseOptionWindow","ewt","onPageSwitch","handlePageSwitch","renderErrorPage","icon","windowTitle","headText","subText","renderLeaveMessagePage","shouldShowEmailInput","isLoggedIn","renderConnectingPage","shouldShowMinimizeBtn","renderChatWindowPage","pageName","setState","this","isDesignTokenApplied","isI18nReady","renderContent","accessToken","applicationId","prefixAPIUrl","GatewayHttpClient","setContainerElementStyle","fetchConfig","applyDesignToken","restoreContainerElementStyle","content","newState","ChatService","chatConfig","isAgentOnline","isSuccess","errors","restConfig","brand","CssImport","console","debug","message","containerElement","originContainerElementPosition","style","position","PureComponent","defaultProps","onChatWidgetClose","Promise","resolve","withTranslation"],"sourceRoot":""}